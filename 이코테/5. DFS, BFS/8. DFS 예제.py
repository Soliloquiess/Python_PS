# DFS 함수 정의
def dfs(graph, v, visited):
    # 현재 노드를 방문 처리
    visited[v] = True
    print(v, end=' ')
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:  #graph[v]는 v돌면서 v가 1이면 [2,3,8], [1,7], [1,4,5] 이렇게 배열을 돌면서 탐색하는거.
        if not visited[i]:  #방문하지 않았다면.
            dfs(graph, i, visited)  #visited는 i번째에 해당하는 배열을 다 넘겨줘버려서 계산한다.

# 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
  [],   #인덱스 0 부분은 빈 리스트로 넣어주는 것이 좋다.
  [2, 3, 8],    #1번 인덱스에 인접한 노드는 뭔지
  [1, 7],       #2번 인덱스에 인접한 노드는 뭔지
  [1, 4, 5],    #3번 인덱스에 인접한 노드는 뭔지
  [3, 5],       #4번 인덱스에 인접한 노드는 뭔지
  [3, 4],       #5번 인덱스에 인접한 노드는 뭔지
  [7],          #6번 인덱스에 인접한 노드는 뭔지
  [2, 6, 8],    #7번 인덱스에 인접한 노드는 뭔지
  [1, 7]        #8번 인덱스에 인접한 노드는 뭔지
]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visited = [False] * 9   #여기서 인덱스 0은 사용하지 않음 그래서 8이 아닌 9를 사용했다.

# 정의된 DFS 함수 호출
dfs(graph, 1, visited)