import sys
sys.stdin=open("input.txt", "r")
dx=[-1, 0, 1, 0]
dy=[0, 1, 0, -1]

def DFS(x, y):
    global cnt
    if x==ex and y==ey:
        cnt+=1
    else:
        for k in range(4):
            xx=x+dx[k]
            yy=y+dy[k]  #시계방향으로 봄
            if 0<=xx<n and 0<=yy<n and ch[xx][yy]==0 and board[xx][yy]>board[x][y]:
                #0<=xx<n and 0<=yy<n and ch[xx][yy]==0 경계선 벗어나지 않게
                #board[xx][yy]>board[x][y] 가려고 하는 지점이 현재 지점보다 커야지만 이동하는거
                ch[xx][yy]=1    #가려고 하는 지점
                DFS(xx, yy)     #dfs로 뻗어나감
                ch[xx][yy]=0    #백했을때(dfs로 위아래가 대칭 위에서 한 행동 취소할떄 체크 해제)

if __name__=="__main__":
    n=int(input())
    board=[[0]*n for _ in range(n)]
    ch=[[0]*n for _ in range(n)]
    max=-2147000000
    min=2147000000
    for i in range(n):
        tmp=list(map(int, input().split())) #여기서 한 줄을 읽음.
        for j in range(n):
            if tmp[j]<min:  #한 줄에서 최소값이 발견 되면
                min=tmp[j]  #그 떄 최소 값 교체
                sx=i        #sx,sy가 스타트 지점.
                sy=j        #그 sx에 i가 행번호, 열 번호를 sy에 넣음
                #즉 스타트 지점을 계속 갱신
            if tmp[j]>max:  #가장 높은지점 발견되면
                max=tmp[j]
                ex=i
                ey=j        #ex,ey는 도착지점의 행, 열 번호
            board[i][j]=tmp[j]  #보드에 복사해 넣음.
    ch[sx][sy]=1
    cnt=0
    DFS(sx, sy)
    print(cnt)