import java.util.*;
class Lecture implements Comparable<Lecture>{
    public int money;
	public int time;
    Lecture(int money, int time) {
        this.money = money;
        this.time = time;
    }
    @Override
    public int compareTo(Lecture ob){
        return ob.time-this.time;
    }
}
//날짜를 반대로 세가면서 계산 
// 3일안에 하는건 2일 안에도 가능하고 마찬가지로 1일 안에도 가능하다. 그래서 반대로 돌면서 계산해나간다.
class Main {
	static int n, max=Integer.MIN_VALUE;
	public int solution(ArrayList<Lecture> arr){
		int answer=0;
		PriorityQueue<Integer> pQ = new PriorityQueue<>(Collections.reverseOrder());	//기본은 작은거 먼저 나오는데 reverseOrder로 반대로  큰게 먼저 나오게 한다.
		Collections.sort(arr);
		int j=0;
		for(int i=max; i>=1; i--){
			for(; j<n; j++){
				if(arr.get(j).time<i) break;	//arraylist라 get(j)로 접근
				pQ.offer(arr.get(j).money);	//j번째에 있는 money
			}
			if(!pQ.isEmpty()) answer+=pQ.poll();	//pQ가 비어있지 않으면 pQ에 가장 큰 값을 넣어줌(poll) 가장 큰 강연료 갖는 값을 하겠다.
			
		}
		return answer;
	}

	public static void main(String[] args){
		Main T = new Main();
		Scanner kb = new Scanner(System.in);
		n=kb.nextInt();
		ArrayList<Lecture> arr = new ArrayList<>();
		for(int i=0; i<n; i++){
			int m=kb.nextInt();
			int d=kb.nextInt();
			arr.add(new Lecture(m, d));
			if(d>max) max=d;
		}
		System.out.println(T.solution(arr));
	}
}